__________________
Pipe() System call
__________________

Conceptually, a pipe is a connection between two processes, such that the
standard output from one process becomes the standard input of the other
process.

In UNIX Operating system, pipes are useful for communication between related
process (inter-process communication).

_Pipe is one-way communication only i.e we can use a pipe such that; one
process write to the pipe, and the other reads from the pipe. It opens a pipe,
which is an area of main-memory that is treated as a "virtual file".

_The pipe can be used by the creating process, as well as all its child
processes, for reading and writing. One process can write to this "virtual file"
or pipe and another related process can read from it.

_If a process tries to read before something is written to the pipe, the process
is suspended until something is written.

_The pipe system call finds the first two available positions in the process's
open file table and allocates them for the read and write ends of the pipe.

____________________
Syntax in C-language
____________________

________________________________________________________________________________
//PROTOTYPE!
int pipe(int fds[2])      //intger array "fds" or size-2

Parameters:

_fd[0] will be the "fd" (file descriptor) for the read end of the pipe

_fd[1] will be the "fd" for the write end of the pipe.

Returns: 0 on success
-1 on error
________________________________________________________________________________

_________
Example 1
_________

________________________________________________________________________________
//C-program to illustrate pipe system call in C

#include <stdio.h>
#include <unistd.h>
#define MSGSIZE 14

char *msg1 = "Hello World #1";
char *msg2 = "Hello World #2";
char *msg3 = "Hello World #3";

int main()
{
  char inbuf[MSGSIZE];
  int p[2];

  if (pipe(p) < 0)              //Returns 0 on success and -1 on error
  {
    exit(1);
  }

  write(p[1], msg1, MSGSIZE);
  write(p[1], msg2, MSGSIZE);
  write(p[1], msg3, MSGSIZE);

  for (int i = 0; i < 3; i++)
  {
    read(p[0], inbuf, MSGSIZE);
    printf("% s\n", inbuf);
  }
  return 0;
}
________________________________________________________________________________

________________________________________________________________________________
_______
Output:
_______

Hello World #1
Hello World #2
Hello World #3
________________________________________________________________________________

________________
Further reading:
________________

https://www.geeksforgeeks.org/pipe-system-call/
